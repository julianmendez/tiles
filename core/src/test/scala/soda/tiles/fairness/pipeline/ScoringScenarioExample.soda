
/**
 * This is a scoring scenario. Twenty-six people have a protected attribute, and are considered
 * for 'yes' or 'no' with respect to some unspecified query.
 */

class ScoringScenarioExample

  abstract

  agents : Seq [Agent] =
    Seq (
      "Alice", "Benjamin", "Charlotte", "Daniel", "Emily", "Fiona", "George", "Hannah", "Isaac",
      "James", "Kevin", "Lily", "Matthew", "Natalie", "Olivia", "Quinn", "Peter", "Rachel",
      "Sarah", "Timothy", "Ursula", "Victoria", "William", "Xavier", "Yasmine", "Zachary"
    )

  _resource_zero : Resource = "0"

  _resource_one : Resource = "1"

  _measure_zero : Measure = Some (0)

  _measure_one : Measure = Some (1)

  seed_protected_attribute : Long = 127

  protected_attribute_modulus : Int = 2

  mod (x : Int) (modulus : Int) : Int =
    ( (x % modulus) + modulus) % modulus

  as_protected_attribute (x : Int) : Int =
    mod (x) (protected_attribute_modulus)

  protected_attribute : Seq [Boolean] =
    Random .mk .get_next_seq (seed_protected_attribute) (agents .length)
      .map (lambda x --> as_protected_attribute (x .intValue) == 1)

  protected_attribute_map : Map [Agent] [Boolean] =
    agents
      .indices
      .map (lambda index -->
        Tuple2 [Agent] [Boolean] (agents .apply (index) , protected_attribute .apply (index) ) )
      .toMap

  protected_attribute_function (a : Agent) : Boolean =
    protected_attribute_map .getOrElse (a , false)

  seed_result : Long = 65535

  prediction_modulus : Int = 100

  prediction_limit : Int = prediction_modulus / 2

  min (a : Int) (b : Int) : Int =
    if a < b
    then a
    else b

  as_prediction (x : Int) : Int =
    mod (min (x) (prediction_modulus - 1) ) (prediction_modulus)

  make_binary_resource (x : Int) : Resource =
    if x > prediction_limit
    then _resource_one
    else _resource_zero

  result_values : Seq [Int] =
    Random .mk
      .get_next_seq (seed_result) (agents .length)
      .map (lambda x --> as_prediction ( (x .intValue) % prediction_modulus) )

  prediction_error : Int = 1

  prediction_bias_on_attribute : Int = 40

  maximum_acceptable_bias_percentage : Measure = Some (30)

  result : Seq [Resource] =
    result_values .map (lambda x --> make_binary_resource (x) )

  result_map : Map [Agent] [Resource] =
    agents
      .indices
      .map (lambda index -->
        Tuple2 [Agent] [Resource] (agents .apply (index) , result .apply (index) ) )
      .toMap

  result_function (a : Agent) : Resource =
    result_map .getOrElse (a , _resource_zero)

  add_attribute_bias (index : Int) (original : Int) : Int =
    if (protected_attribute .apply (index) )
    then original
    else as_prediction (original + prediction_bias_on_attribute)

  add_prediction_error (value : Int) : Int =
    as_prediction (value + prediction_error)

  unbiased_prediction : Seq [Resource] =
    result_values
      .map (lambda x --> add_prediction_error (x) )
      .map (lambda x --> make_binary_resource (x) )

  biased_prediction : Seq [Resource] =
    result_values
      .indices
      .map (lambda index --> add_attribute_bias (index) (result_values .apply (index) ) )
      .map (lambda x --> add_prediction_error (x) )
      .map (lambda x --> make_binary_resource (x) )

  unbiased_outcome : Outcome =
    Outcome .mk (
      agents
        .indices
        .map (lambda index -->
          Assignment .mk (agents .apply (index) ) (unbiased_prediction .apply (index) )
        )
    )

  biased_outcome : Outcome =
    Outcome .mk (
      agents
        .indices
        .map (lambda index -->
          Assignment .mk (agents .apply (index) ) (biased_prediction .apply (index) )
        )
    )

  positive_value : Resource = _resource_one

  context = "context"

  initial_unbiased : TileMessage [Boolean] =
    TileMessageBuilder .mk .build (context) (unbiased_outcome) (true)

  initial_biased : TileMessage [Boolean] =
    TileMessageBuilder .mk .build (context) (biased_outcome) (true)

end

