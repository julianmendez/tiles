
class SumFoldTile
  extends
    FoldTile [Int] [Int]

  abstract

  z : Int = 0

  phi : Int -> Int -> Int =
    lambda acc -->
      lambda elem -->
        acc + elem

end


class FoldTileSpec ()
  extends
    AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  scenario = ScenarioExample .mk

  mk_tile_message (seq : Seq [Int] ) : TileMessage [Seq [Int] ] =
    TileMessageBuilder
      .mk
      .build (scenario .context) (scenario .outcome0) (seq)

  test ("fold on empty sequence returns initial value") (
    check(
      obtained := SumFoldTile .mk
        .apply (mk_tile_message (Seq [Int] () ) )
        .contents
    ) (
      expected := 0
    )
  )

  test ("fold on single element sequence") (
    check(
      obtained := SumFoldTile .mk
        .apply (mk_tile_message (Seq [Int] (5) ) )
        .contents
    ) (
      expected := 5
    )
  )

  test ("fold on multiple elements sequence") (
    check(
      obtained := SumFoldTile .mk
        .apply (mk_tile_message (Seq [Int] (1 , 2 , 3 , 4) ) )
        .contents
    ) (
      expected := 10
    )
  )

end

