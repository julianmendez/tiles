
class AverageTileSpec ()
  extends
    AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert (obtained == expected)

  tile = AverageTile .mk

  scenario = ScenarioExample .mk

  mk_tile_message (seq: Seq [Measure] ) : TileMessage [Seq [Measure] ] =
    TileMessageBuilder
      .mk
      .build (scenario .context) (scenario .outcome0) (seq)

  test ("average of empty sequence should be zero") (
    check (
      obtained := tile
        .apply (mk_tile_message (Seq [Measure] () ) )
        .contents
    ) (
      expected := Some (0)
    )
  )

  test ("average of single element sequence should be that element") (
    check (
      obtained := tile
        .apply (mk_tile_message (Seq (Some (5) ) ) )
        .contents
    ) (
      expected := Some (5)
    )
  )

  test ("average of multiple elements should be correct") (
    check (
      obtained := tile
        .apply (mk_tile_message (Seq (Some (2) , Some (4) , Some (6) ) ) )
        .contents
    ) (
      expected := Some (4)
    )
  )

  test ("average should return None if any element is None") (
    check (
      obtained := tile
        .apply (mk_tile_message (Seq (Some (2) , None , Some (6) ) ) )
        .contents
    ) (
      expected := None
    )
  )

  test ("average of sequence with zero elements should be zero") (
    check (
      obtained := tile .apply_function_with (Some (10) ) (Some (0) )
    ) (
      expected := Some (0)
    )
  )

end

