
class ExistsTileSpec ()
  extends
    AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert(obtained == expected)

  scenario = ScenarioExample .mk

  mk_tile_message (seq : Seq [Int] ) : TileMessage [Seq [Int] ]  =
    TileMessageBuilder
      .mk
      .build (scenario .context) (scenario .outcome1) (seq)

  phi (x : Int) : Boolean = x > 10

  exists_tile = ExistsTile .mk [Int] (phi)

  test ("exists on empty sequence returns false")(
    check (
      obtained := exists_tile
        .apply (mk_tile_message (Seq [Int] () ) )
        .contents
    ) (
      expected := false
    )
  )

  test ("exists on sequence with no matching elements returns false")(
    check (
      obtained := exists_tile
        .apply (mk_tile_message (Seq [Int] (1 , 5 , 10) ) )
        .contents
    ) (
      expected := false
    )
  )

  test ("exists on sequence with one matching element returns true")(
    check (
      obtained := exists_tile
        .apply (mk_tile_message (Seq [Int] (5 , 15 , 3) ) )
        .contents
    ) (
      expected := true
    )
  )

  test ("exists on sequence with all matching elements returns true")(
    check (
      obtained := exists_tile
        .apply (mk_tile_message (Seq [Int] (20 , 30 , 40) ) )
        .contents
    ) (
      expected := true
    )
  )

end
