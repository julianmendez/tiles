
class SumCountTileSpec ()
  extends
    AnyFunSuite

  check [A : Type] (obtained : A) (expected : A) : org.scalatest.compatible.Assertion =
    assert(obtained == expected)

  scenario = ScenarioExample .mk

  mk_tile_message (seq : Seq [Int] ) : TileMessage [Seq [Measure] ] =
    TileMessageBuilder
      .mk
      .build (scenario .context) (scenario .outcome0) (seq .map (lambda x --> Some (x) ) )

  sum_count_tile = SumCountTile .mk

  test ("sum and count on empty sequence") (
    check(
      obtained := sum_count_tile
        .apply (mk_tile_message (Seq [Int] () ) )
        .contents
    ) (
      expected := TilePair .mk (Some (0) ) (Some (0) )
    )
  )

  test ("sum and count on single element sequence") (
    check (
      obtained := sum_count_tile
        .apply (mk_tile_message (Seq [Int] (5) ) )
        .contents
    ) (
      expected := TilePair .mk (Some (5) ) (Some (1) )
    )
  )

  test ("sum and count on multiple elements sequence") (
    check (
      obtained := sum_count_tile
        .apply (mk_tile_message (Seq [Int] (1 , 2 , 3 , 4) ) )
        .contents
    ) (
      expected := TilePair .mk (Some(10) ) (Some(4) )
    )
  )

end

