
directive lean
import Soda.tiles.fairness.tool.TileMessage


/**
 * This tile connects two sequences and returns a sequence of pairs, such that for each
 * position in both sequences, it has a pair with elements for the corresponding input
 * sequences.
 */

class ZipTile [A : Type] [B : Type]

  abstract

  zip_lists (list0 : Seq [A] ) (list1 : Seq [B] ) : Seq [TilePair [A] [B] ] =
    list0
      .zip (list1)
      .map (lambda pair --> TilePair .mk [A] [B] (pair ._1) (pair ._2) )

  apply (message0 : TileMessage [Seq [A] ] ) (message1 : TileMessage [Seq [B] ] )
      : TileMessage [Seq [TilePair [A] [B] ] ] =
    TileMessageBuilder .mk .build (message0 .context) (message0 .outcome) (
      zip_lists (message0 .contents) (message1 .contents)
    )

end

