
directive lean
import Soda.tiles.fairness.tool.TileMessage


/**
 * This tile takes a sequence of pair of measures as input, and returns a sequence such that,
 * for each pair (m0, m1) in the input, is m = sigma (m0, m1), where sigma is a given function
 * to combine measures.
 */

class SigmaTile

  abstract
    sigma : Measure -> Measure -> Measure

  zip_tile = ZipPairTile .mk

  apply_zipped (message : TileMessage [Seq [TilePair [Measure] [Measure] ] ] )
      : TileMessage [Seq [Measure] ] =
    TileMessageBuilder .mk .build (message .context) (message .outcome) (
      (message .contents)
        .map (lambda pair --> sigma (pair .fst) (pair .snd) )
    )

  apply (message0 : TileMessage [Seq [Measure] ] ) (message1 : TileMessage [Seq [Measure] ] )
      : TileMessage [Seq [Measure] ] =
    apply_zipped (
      zip_tile .apply (message0) (message1)
    )

end

