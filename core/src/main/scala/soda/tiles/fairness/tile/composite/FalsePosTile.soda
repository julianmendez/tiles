
directive lean
import Soda.tiles.fairness.tool.TileMessage
import soda.tiles.fairness.tile.composite.ZipSigmaTile

/**
 * This tiles takes a sequence of pairs of measures (m0, m1), and returns a sequence, which
 * for each pair is 1, if m0 = 1 and m1 = 0, and 0 otherwise.
 */

class FalsePosTile

  abstract

  _measure_zero : Measure = Some (0)

  _measure_one : Measure = Some (1)

  sigma (m0 : Measure) (m1 : Measure) : Measure =
    if (m0 == _measure_one) and (m1 == _measure_zero)
    then _measure_one
    else _measure_zero

  apply (message0 : TileMessage [Seq [Measure] ] ) (message1 : TileMessage [Seq [Measure] ] )
      : TileMessage [Seq [Measure] ] =
    ZipSigmaTile .mk (sigma) .apply (message0) (message1)

end

