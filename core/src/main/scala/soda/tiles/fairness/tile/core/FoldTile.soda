
directive lean
import Soda.tiles.fairness.tool.TileMessage

/**
 * This takes a sequence, a starting value, and a function, then processes the sequence from left to right,
 * combining elements into a single result step by step.
 */

class FoldTile [A : Type] [B : Type]

  abstract
    z : B
    phi : B -> A -> B

  _tailrec_foldl (sequence : Seq [A] ) (current : B) (next : B -> A -> B) : B =
    match sequence
      case Nil ==> current
      case (head) +: (tail) ==>
        _tailrec_foldl (tail) (next (current) (head) ) (next)

  foldl (sequence : Seq [A] ) (initial : B) (next : B -> A -> B) : B =
    _tailrec_foldl (sequence) (initial) (next)

  apply (message : TileMessage [Seq [A] ] ) : TileMessage [B] =
    TileMessageBuilder .mk .build (message .context) (message .outcome) (
      (foldl (message .contents) (z) (phi) )
    )

end

