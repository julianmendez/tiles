
directive lean
import Soda.tiles.fairness.tool.TileMessage


/**
 * This tile connects three sequences and returns a sequence of triples, such that for each
 * position in both sequences, it has a triple with elements for the corresponding input
 * sequences.
 */

class ZipTripleTile

  abstract

  zip_lists [A : Type] [B : Type] [C : Type] (list0 : Seq [A] ) (list1 : Seq [B] ) (list2 : Seq [C] )
      : Seq [TileTriple [A] [B] [C] ] =
    list0
      .zip (list1)
      .zip (list2)
      .map (lambda triple --> TileTriple .mk [A] [B] [C] (triple ._1 ._1) (triple ._1 ._2) (triple ._2) )

  apply [A : Type] [B : Type] [C : Type] (message0 : TileMessage [Seq [A] ] )
    (message1 : TileMessage [Seq [B] ] ) (message2 : TileMessage [Seq [C] ] )
      : TileMessage [Seq [TileTriple [A] [B] [C] ] ] =
    TileMessageBuilder .mk .build (message0 .context) (message0 .outcome) (
      zip_lists (message0 .contents) (message1 .contents) (message2 .contents)
    )

end

