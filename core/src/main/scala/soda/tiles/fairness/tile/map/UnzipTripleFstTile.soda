
directive lean
import Soda.tiles.fairness.tool.TileMessage


/**
 * This tile takes a sequence of triples (a, b, c), and returns a sequence with the first
 * component of each pair from the input.
 */

class UnzipTripleFstTile

  abstract

  apply [A : Type] [B : Type] [C : Type] (
      message : TileMessage [Seq [TileTriple [A] [B] [C] ] ] ) : TileMessage [Seq [A] ] =
    TileMessageBuilder .mk .build (message .context) (message .outcome) (
      (message .contents)
        .map (lambda triple --> triple .fst)
    )

end

