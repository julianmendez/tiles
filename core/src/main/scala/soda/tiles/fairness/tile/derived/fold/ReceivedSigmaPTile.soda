
directive lean
import Soda.tiles.fairness.tool.TileMessage


/**
 * This tile takes a sequence of agents as input and returns a sequence containing, for each
 * agent in the input sequence, a measure amounting the value of all the resources given to that
 * agent. This tile requires a function to count multiple resources, and another function that
 * informs the value of each resource.
 */

class ReceivedSigmaPTile

  abstract
    sigma : Measure -> Measure -> Measure
    p : Resource -> Measure

  _sigma2 (m0 : Measure , m1 : Measure) : Measure =
    sigma (m0) (m1)

  _measure_zero : Measure = Some (0)

  get_assignment (assignments : Seq [Assignment] ) (a : Agent) : Option [Assignment] =
    assignments . find (lambda assignment --> (assignment .agent) == a)

  get_measure (outcome : Outcome) (a : Agent) : Measure =
    (get_assignment (outcome .assignments) (a) )
      .map (lambda assignment --> p (assignment .resource) )
      .foldLeft (_measure_zero) (_sigma2)

  apply (message : TileMessage [Seq [Agent] ] ) : TileMessage [Seq [Measure] ] =
    TileMessageBuilder .mk .build (message .context) (message .outcome) (
      ( (message .contents)
        .map (lambda agent --> get_measure (message .outcome) (agent) ) )
    )

end

