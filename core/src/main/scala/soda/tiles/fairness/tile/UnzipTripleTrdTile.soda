
directive lean
import Soda.tiles.fairness.tool.TileMessage


/**
 * This tile takes a sequence of triples (a, b, c), and returns a sequence with the third
 * component of each pair from the input.
 */

class UnzipTripleTrdTile

  abstract

  unzip_trd_list [A : Type] [B : Type] [C : Type] (
      list : Seq [TileTriple [A] [B] [C] ] ) : Seq [C] =
    list .map (lambda triple --> triple .trd)

  apply [A : Type] [B : Type] [C : Type] (
      message : TileMessage [Seq [TileTriple [A] [B] [C] ] ] ) : TileMessage [Seq [C] ] =
    TileMessageBuilder .mk .build (message .context) (message .outcome) (
      unzip_trd_list (message .contents)
    )

end

