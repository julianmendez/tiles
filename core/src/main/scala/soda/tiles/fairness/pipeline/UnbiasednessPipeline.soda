
directive lean
import Soda.tiles.fairness.tool.TileMessage
import Soda.tiles.fairness.tile.AllAgentTripleTile
import Soda.tiles.fairness.tile.CorrelationTile
import Soda.tiles.fairness.tile.DecisionTile
import Soda.tiles.fairness.tile.FalsePosTile
import Soda.tiles.fairness.tile.PredictionPTile
import Soda.tiles.fairness.tile.ResultPTile
import Soda.tiles.fairness.tile.UnzipTripleFstTile
import Soda.tiles.fairness.tile.UnzipTripleSndTile
import Soda.tiles.fairness.tile.UnzipTripleTrdTile
import Soda.tiles.fairness.tile.WithPTile
import Soda.tiles.fairness.tile.ZipTile

/**
 * This pipeline checks unbiasedness for a given scenario.
 */

class UnbiasednessPipeline

  abstract
    p0_evaluation : Resource -> Measure
    p1_result : Agent -> Measure
    p2_with_p : Agent -> Measure
    p3_acceptable_bias : Measure

  all_agent_tile = AllAgentTile .mk

  all_agent_triple_tile = AllAgentTripleTile .mk

  triple_fst_tile = ProjectionTripleFstTile .mk

  triple_snd_tile = ProjectionTripleSndTile .mk

  triple_trd_tile = ProjectionTripleTrdTile .mk

  zip_pair_tile = ZipPairTile .mk

  zip_triple_tile = ZipTripleTile .mk

  prediction_p_tile = PredictionPTile .mk (p0_evaluation)

  result_p_tile = MapTile .mk [Agent] [Measure] (p1_result)

  with_p_tile = MapTile .mk [Agent] [Measure] (p2_with_p)

  false_pos_tile = FalsePosTile .mk

  correlation_tile = CorrelationTile .mk

  decision_tile = DecisionTile .mk (p3_acceptable_bias)

  get_correlation_plumbing (message0 : TileMessage [Seq [Agent] ] )
    (message1 : TileMessage [Seq [Agent] ] ) (message2 : TileMessage [Seq [Agent] ] )
      : TileMessage [Measure] =
    correlation_tile .apply (
      false_pos_tile .apply (prediction_p_tile .apply (message0) ) (result_p_tile .apply (message1) )
    ) (with_p_tile .apply (message2) )

  apply_on_triple (triple : TileMessage [TileTriple [Seq [Agent] ] [Seq [Agent] ] [Seq [Agent] ] ] )
      : TileMessage [Boolean] =
    decision_tile .apply (
      get_correlation_plumbing (
        triple_fst_tile .apply (triple) ) (
        triple_snd_tile .apply (triple) ) (
        triple_trd_tile .apply (triple) )
    )

  apply (message : TileMessage [Boolean] ) : TileMessage [Boolean] =
    apply_on_triple (all_agent_triple_tile .apply (message) )

end

