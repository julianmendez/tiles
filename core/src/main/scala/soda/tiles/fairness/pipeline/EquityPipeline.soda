
directive lean
import Soda.tiles.fairness.tool.TileMessage
import Soda.tiles.fairness.tile.composite.AtLeastTile
import Soda.tiles.fairness.tile.composite.ReceivedSigmaPTile
import Soda.tiles.fairness.tile.derived.map.NeedsTile
import Soda.tiles.fairness.tile.derived.map.UnzipPairFstTile
import Soda.tiles.fairness.tile.derived.map.UnzipPairSndTile
import Soda.tiles.fairness.tile.primitive.ZipTile


/**
 * This pipeline returns 'true' when all the agents in the input receive a resource that
 * satisfies their needs, and 'false' otherwise.
 */

class EquityPipeline

  abstract
    sigma : Measure -> Measure -> Measure
    p0_need : Agent -> Measure
    p1_utility : Resource -> Measure

  at_least_tile = AllAtLeastTile .mk

  received_sigma_p_tile = ReceivedSigmaPTile .mk (sigma) (p1_utility)

  needs_tile = NeedsTile .mk (p0_need)

  all_agent_pair_tile = AllAgentPairTile .mk

  pair_fst_tile = ProjectionPairFstTile .mk

  pair_snd_tile = ProjectionPairSndTile .mk

  apply_on_pair (pair : TileMessage [TilePair [Seq [Agent] ] [Seq [Agent] ] ] ) : TileMessage [Boolean] =
    at_least_tile .apply (
      received_sigma_p_tile .apply (pair_fst_tile (pair) )
    ) (
      needs_tile .apply (pair_snd_tile (pair) )
    )

  apply (message : TileMessage [Boolean] ) : TileMessage [Boolean] =
    apply_on_pair (all_agent_pair_tile .apply (message) )

end

