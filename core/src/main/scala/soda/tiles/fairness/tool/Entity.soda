
directive lean
import Soda.tiles.fairness.tool.StringComparator


class Identifier = String


class Agent = Identifier


class Resource = Identifier


class Context = Identifier


class Measure = Option [Int]


class MeasureMod

  abstract

  zero : Measure = Some (0)

  one : Measure = Some (1)

  is_equals_0 (measure : Measure) : Boolean =
    match measure
      case Some (0) ==> true
      case otherwise ==> false

  add_value_to (value : Int) (m : Measure) : Measure =
    match m
      case Some (other_value) ==> Some (value + other_value)
      case None ==> None

  plus (a : Measure) (b : Measure) : Measure =
    match a
      case Some (value) ==> add_value_to (value) (b)
      case None ==> None

  _divide_integers (a : Int) (b : Int) : Measure =
    if b == 0
    then None
    else Some (a / b)

  divide_by (a : Measure) (b : Int) : Measure =
    match a
      case Some (value) ==> _divide_integers (value) (b)
      case None ==> None

  divide (a : Measure) (b : Measure) : Measure =
    match b
      case Some (value) ==> divide_by (a) (value)
      case None ==> None

end


class Assignment

  abstract
    agent : Agent
    resource : Resource

end


class Outcome

  abstract
    assignments : Seq [Assignment]

end


class OutcomeMod

  abstract

  get_assignments (outcome : Outcome) (a : Agent) : Seq [Assignment] =
    outcome
      .assignments
      .filter (lambda assignment --> assignment .agent == a)

  get_resources (outcome : Outcome) (a : Agent) : Seq [Resource] =
    get_assignments (outcome) (a)
      .map (lambda assignment --> assignment .resource)

  receives (outcome : Outcome) (a : Agent) (r : Resource) : Boolean =
    outcome
      .assignments
      .contains (Assignment .mk (a) (r) )

end


/**
 * This class contains functions to compare different types of objects.
 */

class Comparator

  abstract

  directive lean
  def compareString (string0 : String) (string1 : String) : Int :=
    StringComparator.compare (string0) (string1)

  directive scala
  def compareString (string0 : String) (string1 : String) : Int =
    StringComparator.mk.compare (string0) (string1)

  compareIdentifier (identifier0 : Identifier) (identifier1 : Identifier) : Int =
    compareString (identifier0) (identifier1)

  compareAgent (agent0 : Agent) (agent1 : Agent) : Int =
    compareIdentifier (agent0) (agent1)

  compareResource (resource0 : Resource) (resource1 : Resource) : Int =
    compareIdentifier (resource0) (resource1)

  compareContext (context0 : Context) (context1 : Context) : Int =
    compareIdentifier (context0) (context1)

  _compareNone (measure : Measure) : Int =
    match measure
      case Some (value) ==> -1
      case None ==> 0

  _compareSome (value : Int) (measure : Measure) : Int =
    match measure
      case Some (other_value) ==> value - other_value
      case None ==> 1

  compareMeasure (measure0 : Measure) (measure1 : Measure) : Int =
    match measure0
      case Some (value) ==> _compareSome (value) (measure1)
      case None ==> _compareNone (measure1)

  compareAssignment (assignment0 : Assignment) (assignment1 : Assignment) : Int =
    if assignment0 .agent == assignment1 .agent
    then compareResource (assignment0 .resource) (assignment1 .resource)
    else compareAgent (assignment0 .agent) (assignment1 .agent)

end



