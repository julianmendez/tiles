
class Identifier = String


class Actor = Identifier


class Resource = Identifier


class Context = Identifier


class Measure = Option [Int]


class Comparator

  abstract

  compareToIdentifier (identifier0 : Identifier) (identifier1 : Identifier) : Int =
    identifier0 .compareTo (identifier1)

  compareToActor (actor0 : Actor) (actor1 : Actor) : Int =
    compareToIdentifier (actor0) (actor1)

  compareToResource (resource0 : Resource) (resource1 : Resource) : Int =
    compareToIdentifier (resource0) (resource1)

  compareToContext (context0 : Context) (context1 : Context) : Int =
    compareToIdentifier (context0) (context1)

  _compareNoneTo (measure : Measure) : Int =
    match measure
      case Some (value) ==> -1
      case None ==> 0

  _compareSomeTo (value : Int) (measure : Measure) : Int =
    match measure
      case Some (other_value) ==> value - other_value
      case None ==> 1

  compareToMeasure (measure0 : Measure) (measure1 : Measure) : Int =
    match measure0
      case Some (value) ==> _compareSomeTo (value) (measure1)
      case None ==> _compareNoneTo (measure1)

end


class Assignment
  extends
    Comparable [Assignment]

  abstract
    actor : Actor
    resource : Resource

  compareTo (other : Assignment) : Int =
    if actor == other .actor
    then resource .compareTo (other .resource)
    else actor .compareTo (other .actor)

  @override
  toString : String =
    "\u27E8" + actor + ", " + resource + "\u27E9"

end


class Outcome

  abstract
    assignments : Seq [Assignment]

  @override
  toString : String =
    assignments .mkString (",")

end


