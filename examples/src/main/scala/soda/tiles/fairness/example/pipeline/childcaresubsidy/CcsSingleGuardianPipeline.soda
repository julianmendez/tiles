
class CcsSingleGuardianPipeline
  extends
    Pipeline

  abstract
    adults : Agent -> Measure
    utility : Resource -> Measure

  is_equals_0 (measure : Measure) : Boolean =
    match measure
      case Some (0) ==> true
      case otherwise ==> false

  forall_tile = ForallTile .mk [Measure] (is_equals_0)

  all_equal_tile = AllEqualTile .mk

  accumulates_tile = AccumulatesTile .mk (utility)

  all_agent_tile = AllAgentTile .mk

  all_agent_pair_tile = AllAgentPairTile .mk

  pair_fst_tile = ProjectionPairFstTile .mk [Seq [Agent] ] [Seq [Agent] ]

  pair_snd_tile = ProjectionPairSndTile .mk [Seq [Agent] ] [Seq [Agent] ]

  and_combination (b0 : Boolean) (b1 : Boolean) : Boolean =
    b0 and b1

  and_tile = CombineBooleanTile .mk (and_combination)

  tupling_tile = TuplingPairTile .mk [Boolean] [Boolean]

  condition_0 (a : Agent) : Boolean =
    adults (a) .getOrElse (0) == 1

  condition_1 (a : Agent) : Boolean =
    adults (a) .getOrElse (0) > 1

  filter_agent_tile_0 = FilterTile .mk [Agent] (condition_0)

  filter_agent_tile_1 = FilterTile .mk [Agent] (condition_1)

  get_branch_0 (message : TileMessage [Seq [Agent] ] )
      : TileMessage [Boolean] =
    all_equal_tile .apply (
      accumulates_tile .apply (
        filter_agent_tile_0 .apply (
          message
        )
      )
    )

  get_branch_1 (message : TileMessage [Seq [Agent] ] )
      : TileMessage [Boolean] =
    forall_tile .apply (
      accumulates_tile .apply (
        filter_agent_tile_1 .apply (
          message
        )
      )
    )

  apply_on_agents (message : TileMessage [TilePair [Seq [Agent] ] [Seq [Agent] ] ] ) : TileMessage [Boolean] =
    and_tile .apply (
      tupling_tile .apply (
        get_branch_0 (pair_fst_tile .apply (message) )
      ) (
        get_branch_1 (pair_snd_tile .apply (message) )
      )
    )

  apply (message : TileMessage [Boolean] ) : TileMessage [Boolean] =
    apply_on_agents (all_agent_pair_tile .apply (message) )

  runner : TileMessage [Boolean] -> TileMessage [Number] =
    lambda message --> as_number (apply (message) )

end
