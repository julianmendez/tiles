
directive lean
import Soda.tiles.fairness.tool.TileMessage
import Soda.tiles.fairness.tile.composite.AllAgentTripleTile
import Soda.tiles.fairness.tile.CorrelationTile
import Soda.tiles.fairness.tile.DecisionTile
import Soda.tiles.fairness.tile.FalsePosTile
import Soda.tiles.fairness.tile.PredictionPTile
import Soda.tiles.fairness.tile.UnzipTripleFstTile
import Soda.tiles.fairness.tile.UnzipTripleSndTile
import Soda.tiles.fairness.tile.UnzipTripleTrdTile
import Soda.tiles.fairness.tile.WithPTile

/**
 * This pipeline measures the bias in a given scenario by contrasting
 * false positives and those with a protected attribute.
 */

class UnbiasednessPipeline
  extends
    Pipeline

  abstract
    positive_value : Resource
    result_function : Agent -> Resource
    protected_attribute : Agent -> Boolean

  default_value : Number = -1

  all_agent_map_ground_truth_tile = AllAgentMapGroundTruthTile .mk (protected_attribute)

  all_agent_map_false_positive_tile = AllAgentMapFalsePositiveTile .mk (positive_value) (result_function)

  correlation_abs_tile = CorrelationAbsTile .mk

  apply (message : TileMessage [Boolean] ) : TileMessage [Option [Number] ] =
    correlation_abs_tile .apply (
      all_agent_map_false_positive_tile .apply (
        message
      )
    ) (
      all_agent_map_ground_truth_tile .apply (
        message
      )
    )

  _get_number (message : TileMessage [Option [Number] ] ) : TileMessage [Number] =
    TileMessageBuilder .mk .build (message .context) (message .outcome) (
      message .contents .getOrElse (default_value)
    )

  runner : TileMessage [Boolean] -> TileMessage [Number] =
    lambda message --> _get_number (apply (message) )

end

