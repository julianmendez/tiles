
directive lean
import Soda.tiles.fairness.tool.TileMessage
import Soda.tiles.fairness.tile.composite.AtLeastTile
import Soda.tiles.fairness.tile.composite.ReceivedSigmaPTile
import Soda.tiles.fairness.tile.derived.map.NeedsTile
import Soda.tiles.fairness.tile.derived.map.UnzipPairFstTile
import Soda.tiles.fairness.tile.derived.map.UnzipPairSndTile


/**
 * This pipeline returns 'true' when all the agents in the input receive a resource that
 * satisfies their needs, and 'false' otherwise.
 */

class EquityPipeline
  extends
    Pipeline

  abstract
    need : Agent -> Measure
    utility : Resource -> Measure

  all_at_least_tile = AllAtLeastTile .mk

  all_agent_accumulates_tile = AllAgentAccumulatesTile .mk (utility)

  all_agent_needs_tile = AllAgentNeedsTile .mk (need)

  apply (message : TileMessage [Boolean] ) : TileMessage [Boolean] =
    all_at_least_tile .apply (
      all_agent_accumulates_tile .apply (
        message
      )
    ) (
      all_agent_needs_tile .apply (
        message
      )
    )

  runner : TileMessage [Boolean] -> TileMessage [Number] =
    lambda message --> as_number (apply (message) )

end

