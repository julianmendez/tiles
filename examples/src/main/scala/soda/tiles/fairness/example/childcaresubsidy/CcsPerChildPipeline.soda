
directive lean
import Soda.tiles.fairness.tool.TileMessage
import Soda.tiles.fairness.tile.AtLeastTile
import Soda.tiles.fairness.tile.NeededPTile
import Soda.tiles.fairness.tile.ReceivedSigmaPTile
import Soda.tiles.fairness.tile.UnzipPairFstTile
import Soda.tiles.fairness.tile.UnzipPairSndTile
import Soda.tiles.fairness.tile.ZipPairTile


/**
 * This pipeline returns 'true' when all the agents in the input receive a resource that
 * satisfies their needs, and 'false' otherwise.
 */

class CcsPerChildPipeline
  extends
    CcsPipeline

  abstract
    sigma : Measure -> Measure -> Measure
    children : Agent -> Measure
    utility : Resource -> Measure

  all_equal_tile = AllEqualTile .mk

  received_sigma_p_tile = ReceivedSigmaPTile .mk (sigma) (utility)

  children_tile = MapTile .mk [Agent] [Measure] (children)

  all_agent_pair_tile = AllAgentPairTile .mk

  _division_with_2 (val0 : Int) (val1 : Int) : Measure =
    if val1 == 0
    then None
    else Some (val0 / val1)

  _division_with (val0 : Int) (m1 : Measure) : Measure =
    match m1
      case Some (val1) ==> _division_with_2 (val0) (val1)
      case None ==> None

  division (m0 : Measure) (m1 : Measure) : Measure =
    match m0
      case Some (val0) ==> _division_with (val0) (m1)
      case None ==> None

  division_tile = SigmaTile .mk (division)

  pair_fst_tile = ProjectionPairFstTile .mk

  pair_snd_tile = ProjectionPairSndTile .mk

  apply_on_agents (pair : TileMessage [TilePair [Seq [Agent] ] [Seq [Agent] ] ] )
      : TileMessage [Boolean] =
    all_equal_tile .apply (
      division_tile .apply (
        received_sigma_p_tile .apply (pair_fst_tile .apply (pair) )
      ) (
        children_tile .apply (pair_snd_tile .apply (pair) )
      )
    )

  apply (message : TileMessage [Boolean] ) : TileMessage [Boolean] =
    apply_on_agents (all_agent_pair_tile .apply (message) )

  runner : TileMessage [Boolean] -> TileMessage [Boolean] =
    lambda message --> apply (message)

end
