
/**
 * This is a resource allocation scenario. There are three people of different heights. The may
 * need boxes to stand on them and to watch above a wall.
 */

class ResourceAllocationScenarioExample

  abstract

  resource0 = "small box - 0.1 m"

  resource1 = "medium box - 0.2 m"

  resource2 = "large box - 0.3 m"

  agent0 = "Anna A"

  agent1 = "Bob B"

  agent2 = "Charlie C"

  agent_need_map : Map [Agent] [Measure] = Seq (
    Tuple2 [Agent] [Measure] (agent0 , Some (30) ) ,
    Tuple2 [Agent] [Measure] (agent1 , Some (10) ) ,
    Tuple2 [Agent] [Measure] (agent2 , Some (0) )
  ) .toMap

  resource_height_map : Map [Resource] [Measure] = Seq (
    Tuple2 [Resource] [Measure] (resource0 , Some (10) ) ,
    Tuple2 [Resource] [Measure] (resource1 , Some (20) ) ,
    Tuple2 [Resource] [Measure] (resource2 , Some (30) )
  ) .toMap

  agent_need (agent : Agent) : Measure =
    agent_need_map .getOrElse (agent , Some (-1) )

  resource_height (resource : Resource) : Measure =
    resource_height_map .getOrElse (resource , Some (-1) )

  context = "context"

  outcome0 : Outcome =
    Outcome .mk (
      Seq [Assignment] (
        Assignment .mk (agent0) (resource2) ,
        Assignment .mk (agent1) (resource1) ,
        Assignment .mk (agent2) (resource0)
      )
    )

  outcome1 : Outcome =
    Outcome .mk (
      Seq [Assignment] (
        Assignment .mk (agent0) (resource0) ,
        Assignment .mk (agent1) (resource0) ,
        Assignment .mk (agent2) (resource0)
      )
    )

  outcome2 : Outcome =
    Outcome .mk (
      Seq [Assignment] (
        Assignment .mk (agent0) (resource1) ,
        Assignment .mk (agent1) (resource1) ,
        Assignment .mk (agent2) (resource1)
      )
    )

  outcome3 : Outcome =
    Outcome .mk (
      Seq [Assignment] (
        Assignment .mk (agent0) (resource2) ,
        Assignment .mk (agent1) (resource2) ,
        Assignment .mk (agent2) (resource2)
      )
    )

  initial0 : TileMessage [Boolean] =
    TileMessageBuilder .mk .build (context) (outcome0) (true)

  initial1 : TileMessage [Boolean] =
    TileMessageBuilder .mk .build (context) (outcome1) (true)

  initial2 : TileMessage [Boolean] =
    TileMessageBuilder .mk .build (context) (outcome2) (true)

  initial3 : TileMessage [Boolean] =
    TileMessageBuilder .mk .build (context) (outcome3) (true)

end

